worker_processes auto;

error_log logs/error.log warn;
worker_rlimit_core 5G;
worker_rlimit_nofile 204800;

events
{
    use epoll;
    worker_connections 102400;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    open_file_cache max=5000 inactive=60;

    log_format main '$remote_addr - $remote_user [$time_local]  '
        '"$request" $status $request_length $request_time $body_bytes_sent '
        '"$http_referer" "$http_user_agent" $server_addr $upstream_addr $host $upstream_cache_status $scheme '
        'upstream_response_time:$upstream_response_time upstream_status:$upstream_status';

    log_format upstream_access '$time_local $upstream_addr $upstream_status $upstream_response_time $upstream_response_length';

    access_log off;

    sendfile    on;
    tcp_nopush  on;

    server_tokens      off;
    keepalive_requests 50000;
    keepalive_timeout  200;

    client_header_timeout   2s;
    client_body_buffer_size    128k;
    send_timeout 2s;
    client_max_body_size    3m;

    expires off;

    gzip  on;
    gzip_http_version       1.0;
    gzip_comp_level     1;
    gzip_min_length     1024;
    gzip_proxied        any;
    gzip_vary           on;
    gzip_disable        msie6;
    gzip_buffers        256 8k;
    gzip_types          text/xml text/plain text/css application/javascript application/x-javascript application/rss+xml;

    proxy_set_header    Host $host;
    proxy_set_header    Connection "";
    proxy_http_version      1.1;
    proxy_redirect      off;
    proxy_buffers       256 16k;
    proxy_connect_timeout 1s;
    proxy_send_timeout 2s;
    proxy_read_timeout 5s;
    proxy_intercept_errors  on;

    lua_package_path '/usr/local/openresty/lualib/?.lua;/usr/local/openresty/lualib/ipip/datx/?.lua;';

    #init_by_lua_file init.lua;

    limit_req_zone $arg_uid zone=uidlimit:512m rate=1r/s;
    limit_req_zone exchange zone=qpslimit:4m rate=10000r/s;

    lua_shared_dict cache 512m;

    server {
        listen 8000;
        access_log logs/access.log main;

        location ~* \.(css|html|js|xml|htm|jpg|gif|jpeg|png)$ {
            access_log off;
            root /opt/openresty/html;
            charset utf-8;
        }

        location / {
            access_log off;
            return 403;
        }

        location = /v1/ip {
            add_header 'Content-Type' 'text/html';
            content_by_lua '
                local cln = require "luaip"
                ngx.say(cln.find());
            ';
        }
        
	location = /init {
            allow 127.0.0.1;
            deny all;

            content_by_lua '
                ngx.header["Content-Type"] = "text/html";
                ngx.say("This is ngx_lua init...");
            ';
        }
    }
}

